#!/usr/bin/env python3
'Read gestures from libinput touchpad and action shell commands.'
# Original work by: Mark Blakeney, Sep 2015
## More features added by Shivansh Saini, Feb 2018
import os, sys, argparse, subprocess, shlex, re, getpass, fcntl, platform, math
from collections import OrderedDict
from pathlib import Path
from distutils.version import LooseVersion as Version
from xml.dom import minidom
from threading import Timer

PROG = Path(sys.argv[0]).stem

# Conf file containing gesture commands.
# Search first for user file then system file.
CONFNAME = '{}.xml'.format(PROG)
USERDIR = os.getenv('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))
CONFDIRS = (USERDIR, '/etc')

# Ratio of X/Y (or Y/X) at which we consider an oblique swipe gesture.
# The number is the trigger angle in degrees and set to 360/8/2.
OBLIQUE_RATIO = math.tan(math.radians(22.5))

# Default minimum significant distance to move for swipes, in dots.
# Can be changed using configuration command.
swipe_min_threshold = 0

# Rotation threshold in degrees to discriminate pinch rotate from in/out
ROTATE_ANGLE = 30.0

# CUSTOM!
GLOBAL = 'GLOBAL'
TAP_TIMER = 0.5
SINGLE_TAP_THRESHOLD = 0.3
DEFAULT_DEVICES = [('touchpad', 'pointer gesture'), ('keyboard', 'keyboard')]

# Set up command line arguments
opt = argparse.ArgumentParser(description=__doc__)
opt.add_argument('-c', '--conffile',
        help='alternative configuration file')
opt.add_argument('-v', '--verbose', action='store_true',
        help='output diagnostic messages')
opt.add_argument('-d', '--debug', action='store_true',
        help='output diagnostic messages only, do not action gestures')
opt.add_argument('-r', '--raw', action='store_true',
        help='output raw libinput debug-event messages only, '
        'do not action gestures')
opt.add_argument('-l', '--list', action='store_true',
        help='just list out environment and configuration')
opt.add_argument('--devices',
        help='explicit device name to use (or path if starts with /)')
# Test/diag hidden option to specify a file containing libinput list
# device output to parse
opt.add_argument('--device-list', help=argparse.SUPPRESS)
args = opt.parse_args()

if args.debug or args.raw or args.list:
    args.verbose = True

def open_lock(*args):
    """Create a lock based on given list of arguments"""
    # We use exclusive assess to a file for this
    fp = Path('/tmp', '-'.join(args) + '.lock').open('w')
    try:
        fcntl.lockf(fp, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        return None

    return fp

def run(cmd, check=True, **kwargs):
    """Run subprocess function and return standard output or None"""
    # Maintain subprocess compatibility with python 3.4 so use
    # check_output() rather than run().
    try:
        stdout = subprocess.check_output(cmd, universal_newlines=True,
                stderr=(None if check else subprocess.DEVNULL), **kwargs)
    except Exception as e:
        stdout = None
        if check:
            print(str(e), file=sys.stderr)

    return stdout

def get_libinput_vers():
    """Return the libinput installed version number string"""
    # Try to use newer libinput interface then fall back to old
    # (depreciated) interface.
    res = run(('libinput', '--version'), check=False)
    return res.strip() if res else \
            run(('libinput-list-devices', '--version'), check=False)

# Libinput changed the way in which it's utilities are called
libvers = get_libinput_vers()
if not libvers:
    sys.exit('libinput helper tools do not seem to be installed?')

if Version(libvers) >= Version('1.8'):
    cmd_debug_events = 'libinput debug-events'
    cmd_list_devices = 'libinput list-devices'
else:
    cmd_debug_events = 'libinput-debug-events'
    cmd_list_devices = 'libinput-list-devices'

def get_devices_list():
    'Get list of devices and their attributes (as a dict) from libinput'
    if args.device_list:
        with open(args.device_list) as fd:
            stdout = fd.read()
    else:
        stdout = run(cmd_list_devices.split())

    if stdout:
        dev = {}
        for line in stdout.splitlines():
            line = line.strip()
            if line and ':' in line:
                key, value = line.split(':', maxsplit=1)
                dev[key.strip().lower()] = value.strip()
            elif dev:
                yield dev
                dev = {}

def get_device(name, **kwargs):
    """Determine libinput touchpad device"""
    devices = list(get_devices_list())

    if not devices:
        print('Can not see any devices, did you add yourself to the '
                'input group and log out/in?', file=sys.stderr)
        return None

    # If a specific device name was asked for then return that device
    # This is the "Device" name from libinput list-devices command.
    if name:
        kdev = str(Path(name).resolve()) if name[0] == '/' else None
        for d in devices:
            # If the device name starts with a '/' then it is instead
            # considered as the explicit device path although since
            # device paths can change through reboots this is best to be
            # a symlink. E.g. use the corresponding full path link under
            # /dev/input/by-path/*.
            if kdev:
                if d.get('kernel') == kdev:
                    return d
            elif d.get('device') == name:
                return d

    # Otherwise look for 1st device with default types
    dev_type = kwargs.get('capabilities')
    for d in devices:
        if re.search(name, d.get('device', ''), re.I):
            if dev_type:
                if any([word in d.get('capabilities') for word in dev_type.split()]):
                    return d
            else:
                return d
        if dev_type == 'gesture':
            if 'size' in d and 'pointer' in d.get('capabilities'):
                return d

    # Give up
    return None

class COMMAND:
    'Generic command handler'
    def __init__(self, args):
        # Expand '~' and env vars in executable command name
        args[0] = os.path.expandvars(os.path.expanduser(args[0]))
        self.argslist = args

    def run(self):
        'Run this command + arguments'
        subprocess.Popen(self.argslist, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    def __str__(self):
        'Create string representation'
        return ' '.join(self.argslist)

# Table of internal commands
internal_commands = OrderedDict()

def add_internal_command(cls):
    'Add configuration command to command lookup table based on name'
    internal_commands[re.sub('^COMMAND', '', cls.__name__)] = cls

@add_internal_command
class COMMAND_internal(COMMAND):
    'Internal command handler.'
    def __init__(self, args):
        'Action internal swipe commands'
        super().__init__(args)

        # Commands currently supported are:
        commands = (
            'ws_up',
            'ws_down',
        )
        # Set up command line arguments
        opt = argparse.ArgumentParser(prog=self.argslist[0],
                description=self.__doc__)
        opt.add_argument('-w', '--wrap', action='store_true',
                help='Wrap workspaces when switching to/from start/end')
        opt.add_argument('--row', type=int,
                help='Step along the row for this number in a row')
        opt.add_argument('--col', type=int,
                help='Step along the column for this number in a column')
        opt.add_argument('action', choices=commands,
                help='Internal command to action')
        self.args = opt.parse_args(self.argslist[1:])
        self.is_up = self.args.action == commands[0]

    def run(self):
        'Get list of current workspaces and select next one'
        stdout = run(('wmctrl', '-d'), check=False)
        if not stdout:
            # This command can fail on GNOME when you have only a single
            # dynamic workspace using Xorg (probably a GNOME bug) so let's
            # just ignore it given there is no other workspace to switch to
            # anyhow.
            return

        args = self.args
        out = stdout.strip().splitlines()
        lines = [l.split(maxsplit=3)[1] for l in out]
        index = lines.index('*')

        if args.row:
            minindex = index - (index % args.row)
            maxindex = minindex + args.row
            count = 1
        else:
            minindex = 0
            maxindex = len(lines)
            count = (maxindex // args.col) if args.col else 1

        # Work out desired workspace
        index += count if self.is_up else -count
        if args.wrap:
            if index == minindex - count:
                index = maxindex - count
            elif index >= maxindex:
                index += minindex - maxindex
            elif index < minindex:
                index += maxindex - minindex

        # Switch to desired workspace
        if index >= minindex and index < maxindex:
            run(('wmctrl', '-s', str(index)))

# Table of gesture handlers
handlers = OrderedDict()

# To store last gesture
last_gesture = None

def add_gesture_handler(cls):
    """Create gesture handler instance and add to lookup table based on name"""
    handlers[cls.__name__] = cls()

class EVENT:
    """Abstract base class for handling of input events"""
    def __init__(self):
        self.name = type(self).__name__

    def begin(self):
        pass

    def end(self):
        pass

    def action(self):
        pass

    def validate(self, *args, **kwargs):
        pass

class KEY_PRESS(EVENT):
    def __init__(self):
        super(KEY_PRESS, self).__init__()
        self.button = None

    def begin(self, btn):
        self.button = btn[4:]
        if args.verbose:
            print('{}: {} {} {}'.format(PROG, self.name, self.button, 'pressed'))

    def action(self, gesture):
        gesture.end()        

    def end(self, gesture=None):
        if args.verbose:
            print('{}: {} {} {}'.format(PROG, self.name, self.button, 'released'))
        if gesture:
            self.action(gesture)

    def get_key(keys):
        if not keys:
            return None
        return '+'.join([(key.button).lower() for key in keys])

class GESTURE(EVENT):
    """Abstract base class for handling of gestures"""
    SUPPORTED_ATTRIBUTES = ['type', 'motion', 'trigger', 'description', 'held_key']
    REQUIRED_ATTRIBUTES = ['type', 'motion']

    def __init__(self):
        """Initialise this gesture at program start"""
        super(GESTURE, self).__init__()
        self.key = 'motion: {motion}, trigger: {trigger}, held_key: {held_key}'
        self.motions = dict()
        self.has_extended = False

    def validate(self, **kwargs):
        motion = kwargs.get('motion')
        if motion not in self.SUPPORTED_MOTIONS:
            return 'Gesture {} does not support motion "{}".\n' \
                    'Must be "{}"'.format(self.name.lower(), motion,
                            '" or "'.join(self.SUPPORTED_MOTIONS))

    def add(self, application, commands, **kwargs):
        """Add a configured motion command for this gesture"""
        errmsg = self.validate(**kwargs)
        if errmsg:
            return errmsg
        # If any extended gestures configured then set flag to enable
        # their discrimination
        if kwargs.get('motion') and self.extended_text in kwargs.get('motion'):
            self.has_extended = True

        cmds = []
        for command in commands:
            cmd = shlex.split(command)
            cls = internal_commands.get(cmd[0], COMMAND)
            cmds.append(cls(cmd))
        desc = kwargs.pop('description')
        kwargs.pop('type')
        key = self.key.format(**kwargs)
        self.motions.setdefault(application, OrderedDict())[key] = cmds
        if args.verbose:
            print(self.name, '=>', key, '=>', [str(cmd) for cmd in self.motions[application][key]])

    def begin(self, *args, **kwargs):
        """Initialise this gesture at the start of motion"""
        self.data = [0.0, 0.0]

    def action(self, motion):
        """Action a motion command for this gesture"""
        global last_gesture
        global key_handlers
        current_application = run('ps -o comm= -q $(xdotool getactivewindow getwindowpid)', check=False, shell=True).strip()

        held_keys = KEY_PRESS.get_key(key_handlers)

        for application in (current_application, GLOBAL):
            values = self.motions.get(application)
            if values:
                keys = self.get_key(motion, last_gesture, held_keys)
                for key in keys:
                    commands = values.get(key)
                    if commands:
                        break
                else:
                    continue
                break

        if args.verbose:
            print('{}: {}'.format(PROG, self.get_data(motion=motion, trigger=held_keys, last=last_gesture)))

        last_gesture = '{} {}'.format(self.name.lower(), motion)

        if commands:
            for command in commands:
                if args.verbose:
                    print('-> ', command)
                if not args.debug:
                    command.run()

    def get_key(self, motion, last_gesture, held_keys, **kwargs):
        keys = list()
        for trigger in (last_gesture, None):
            for held_key in (held_keys, None):
                extra = {
                    'motion': motion,
                    'trigger': trigger,
                    'held_key': held_key,
                }
                fmt = {**extra, **kwargs}
                keys.append(self.key.format(**fmt))
        return keys

    def get_data(self, *args, **kwargs):
        return '{} {} (held: {}) (last: {})'.format(
            self.name, kwargs['motion'], kwargs['trigger'], kwargs['last'])


@add_gesture_handler
class SWIPE(GESTURE):
    """Class to handle this type of gesture"""
    SUPPORTED_MOTIONS = ('left', 'right', 'up', 'down',
            'left_up', 'right_up', 'left_down', 'right_down')
    extended_text = '_'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.key = self.key + ', fingers: {fingers}'
        self.SUPPORTED_ATTRIBUTES = self.SUPPORTED_ATTRIBUTES + ['fingers']

    def begin(self, fingers):
        super().begin()
        self.fingers = fingers

    def update(self, coords):
        'Update this gesture for a motion'
        # Ignore this update if we can not parse the numbers we expect
        try:
            x = float(coords[2])
            y = float(coords[3])
        except (ValueError, IndexError):
            return False

        self.data[0] += x
        self.data[1] += y
        return True

    def validate(self, **kwargs):
        errmsg = super().validate(**kwargs)
        if errmsg:
            return errmsg
        fingers = kwargs.get('fingers')
        if fingers and not (fingers.isdigit() and int(fingers) < 5):
            return 'fingers should be a digit and less than 5'

    def end(self):
        """Action this gesture at the end of a motion sequence"""
        x, y = self.data
        abx = abs(x)
        aby = abs(y)

        # Require absolute distance movement beyond a small thresh-hold.
        if abx**2 + aby**2 < abzsquare:
            return

        # Discriminate left/right or up/down.
        # If significant movement in both planes the consider it a
        # oblique swipe (but only if any are configured)
        if abx > aby:
            motion = 'left' if x < 0 else 'right'
            if self.has_extended and aby / abx > OBLIQUE_RATIO:
                motion += '_up' if y < 0 else '_down'
        else:
            motion = 'up' if y < 0 else 'down'
            if self.has_extended and abx / aby > OBLIQUE_RATIO:
                motion = ('left_' if x < 0 else 'right_') + motion

        self.action(motion)

    def get_key(self, *args, **kwargs):
        keys = list()
        for fingers in (self.fingers, None):
            kwargs['fingers'] = fingers
            keys.extend(super().get_key(*args, **kwargs))
        return keys

    def get_data(self, *args, **kwargs):
        return super().get_data(*args, **kwargs) + ' (fingers: {})'.format(self.fingers)

@add_gesture_handler
class PINCH(GESTURE):
    """Class to handle this type of gesture"""
    SUPPORTED_MOTIONS = ('in', 'out', 'clockwise', 'anticlockwise')
    extended_text = 'clock'

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def update(self, coords):
        'Update this gesture for a motion'
        # Ignore this update if we can not parse the numbers we expect
        try:
            x = float(coords[4])
            y = float(coords[5])
        except (ValueError, IndexError):
            return False

        self.data[0] += x - 1.0
        self.data[1] += y
        return True

    def end(self):
        """Action this gesture at the end of a motion sequence"""
        ratio, angle = self.data

        if self.has_extended and abs(angle) > ROTATE_ANGLE:
            self.action('clockwise' if angle >= 0.0 else 'anticlockwise')
        elif ratio != 0.0:
            self.action('in' if ratio <= 0.0 else 'out')

@add_gesture_handler
class POINTER(GESTURE):
    """Class to handle pointer taps"""
    SUPPORTED_MOTIONS = ('tap', 'double_tap', 'triple_tap', 'quadruple_tap')
    extended_text = '_'
    prefix = {
        2: 'double', 
        3: 'triple', 
        4: 'quadruple'
    }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.key = self.key + ', button: {button}'
        self.SUPPORTED_ATTRIBUTES = self.SUPPORTED_ATTRIBUTES + ['button']
        self.REQUIRED_ATTRIBUTES = self.REQUIRED_ATTRIBUTES + ['button']

    def validate(self, **kwargs):
        errmsg = super().validate(**kwargs)
        if errmsg:
            return errmsg
        btn = kwargs.get('button')
        if btn not in ('left', 'middle', 'right'):
            return 'button should be one of LEFT, MIDDLE or RIGHT.'

    def begin(self, button, time, clicks=1):
        """Initialise this gesture at the start of motion"""
        self.button = button
        self.data = [float(time[1:-1]), 0.0]
        self.done = False
        self.clicks = clicks
        self.timer = Timer(TAP_TIMER, self.end)
        self.timer.start()

    def update(self, time):
        """Update this gesture for a motion"""
        self.data[1] = float(time[1:-1])
    
    def click(self):
        duration = self.data[1] - self.data[0]
        if duration <= SINGLE_TAP_THRESHOLD:
            self.clicks += 1

    def end(self):
        self.done = True
        if self.clicks == 1:
            motion = 'tap'
        else:
            try:
                motion = self.prefix[self.clicks] + '_tap'
            except KeyError:
                print('Unsupported number of taps: {}'.format(self.clicks))
                return
        self.action(motion)        

    def get_key(self, *args, **kwargs):
        kwargs['button'] = self.button
        return super().get_key(*args, **kwargs)

    def get_data(self, *args, **kwargs):
        return super().get_data(*args, **kwargs) + ' (button: {})'.format(self.button)

@add_gesture_handler
class SHAPE(GESTURE):
    SUPPORTED_MOTIONS = ()
    extended_text = ''

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.key = self.key + ''
        self.SUPPORTED_ATTRIBUTES = self.SUPPORTED_ATTRIBUTES + ['strokes']
        self.REQUIRED_ATTRIBUTES = ['type', 'strokes', 'held_key']

    def validate(self, **kwargs):
        strokes = kwargs.get('strokes')

# Table of configuration commands
conf_commands = OrderedDict()

def add_conf_command(func):
    """Add configuration command to command lookup table based on name"""
    conf_commands[re.sub('^conf_', '', func.__name__)] = func

@add_conf_command
def conf_gesture(application, gestures):
    """Process gestures for every application in conf file"""
    for gesture in gestures:
        if not gesture.hasAttribute('type'):
            return '"type" attribute should be specified for the "gesture" tag.'
        gtype = gesture.getAttribute('type')
        handler = handlers.get(gtype.upper(), None)
        if not handler:
            return 'Gesture "{}" is not supported.\nMust be "{}"'.format(
                gtype, '" or "'.join([h.lower() for h in handlers])) 
        kwargs = dict()
        for attr in handler.SUPPORTED_ATTRIBUTES:
            if not gesture.hasAttribute(attr) and attr in handler.REQUIRED_ATTRIBUTES:
                return 'Gesture "{}" requires "{}" attribute to be specified.'.format(
                    gtype, attr)
            kwargs[attr] = gesture.getAttribute(attr).lower() if gesture.hasAttribute(attr) else None
        commands = gesture.getElementsByTagName('command')
        if not commands:
            return 'No command configured for the given gesture'
        cmds = [command.childNodes[0].data for command in commands]
        errmsg = handler.add(application, cmds, **kwargs)

        if errmsg:
            return errmsg

def conf_device(devices):
    """Process the device attribute found in libinput root tag"""
    # Command line overrides configuration file
    if not args.devices:
        args.devices = devices

    return None if args.devices else 'No device specified'

def get_app_conf(application, app_name):
    """Process app-related conf in conf file"""
    for key in conf_commands.keys():
        conf_func = conf_commands[key]
        errmsg = conf_func(app_name, application.getElementsByTagName(key))
        if errmsg:
            return errmsg

def parse_conf(root):
    if root.tagName != 'libinput':
        return 'Root tag must be "libinput".'
    if root.hasAttribute('device'):
        errmsg = conf_device(re.split(r', *', root.getAttribute('device')))
        if errmsg:
            return errmsg
    applications = root.getElementsByTagName('application')
    for application in applications:
        if application.hasAttribute('name'):
            app_name = application.getAttribute('name')
        else:
            app_name = GLOBAL
        app_names = re.split(r', *', app_name)
        for app in app_names:
            errmsg = get_app_conf(application, app)
            if errmsg:
                return errmsg

def get_conf(conffile, confname):
    """Read given configuration file and store internal actions etc"""
    try:
        file = open(conffile)
        conf = minidom.parse(file)
    except Exception as e:
        print(str(e))
        sys.exit("Couldn't read {}".format(conffile))
    root = conf.documentElement
    errmsg = parse_conf(root)
    if errmsg:
        sys.exit('Error in file {}:\n-> {}.'.format(confname, errmsg))

def unexpanduser(cfile):
    'Return absolute path name, with $HOME replaced by ~'
    relslash = Path(os.path.abspath(str(cfile)))
    try:
        relhome = relslash.relative_to(os.getenv('HOME'))
    except ValueError:
        relhome = None

    return ('~/' + str(relhome)) if relhome else str(relslash)

if args.verbose:
    vers = run(('md5sum', opt.prog), check=False)
    vers = str(vers.split()[0]) if vers else '?'
    xsession = os.getenv('XDG_SESSION_DESKTOP') or \
            os.getenv('DESKTOP_SESSION') or 'unknown'
    xtype = os.getenv('XDG_SESSION_TYPE') or 'unknown'
    print('{}: session {}+{} on {}, python {}, libinput {}, hash {}'.format(
        PROG, xsession, xtype, platform.platform(),
        platform.python_version(), libvers, vers))

# Search for configuration file. Use file given as command line
# argument, else look for file in search dir order.
if args.conffile:
    conffile = Path(args.conffile)
    if not conffile.exists():
        sys.exit('Conf file "{}" does not exist.'.format(conffile))
else:
    for confdir in CONFDIRS:
        conffile = Path(confdir, CONFNAME)
        if conffile.exists():
            break
    else:
        sys.exit('No file {} in {}.'.format(CONFNAME, ' or '.join(
            [unexpanduser(Path(c)) for c in CONFDIRS])))

# Hide any personal user dir/names from diag output
confname = unexpanduser(conffile)

# Read and process the conf file
get_conf(conffile, confname)

# List out available gestures if that is asked for
if args.verbose and not args.raw:
    print('{}: using {} with {} gestures'.format(PROG,
        confname, sum([len(h.motions) for h in handlers.values()])))
    if args.devices:
        print('devices: {}'.format(args.devices))

# Get devices to monitor
devices = []
if isinstance(args.devices, list):
    for dev in args.devices:
        device = get_device(dev)
        if not device:
            sys.exit('Could not determine the device, with device name "{}".'.format(dev))
        if args.verbose:
            print('{}: device {}: {}'.format(PROG, device.get('kernel'), device.get('device')))
        devices.append(device.get('kernel').split('/')[3])
elif args.devices == 'all':
    if args.verbose:
        print('{}: monitoring all devices'.format(PROG))
    devices = None
else:
    for dev in DEFAULT_DEVICES:
        device = get_device(dev[0], capabilities=dev[1])
        if not device:
            continue
        if args.verbose:
            print('{}: device {}: {}'.format(PROG, device.get('kernel'), device.get('device')))
        devices.append(device.get('kernel').split('/')[3])

if args.list:
    sys.exit()

# Make sure only one instance running for current user
user = getpass.getuser()
proglock = open_lock(PROG, user)
if not proglock:
    sys.exit('{} is already running for {}, terminating ..'.format(PROG, user))

# Set up square of swipe threshold
abzsquare = swipe_min_threshold**2

# Note your must "sudo gpasswd -a $USER input" then log out/in for
# permission to access the device.
options = ' --show-keycodes --enable-tap --set-tap-map lrm'
command = 'stdbuf -oL -- {}{}'.format(cmd_debug_events, options)

cmd = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE,
        bufsize=1, universal_newlines=True)

# Sit in a loop forever reading the libinput messages ..
handler = None
prev_handler = None
key_handlers = []
for line in iter(cmd.stdout.readline, ''):
    # Split received message line into relevant fields
    dev, event, time, btn, *argslist = line[1:].strip().split(maxsplit=4)

    if devices and not dev in devices:
        continue

    # Just output raw messages if in that mode
    if args.raw:
        print(line.strip())
        continue

    # Only interested in pointer button events
    if 'POINTER_BUTTON' == event:
        mouse_btn = btn[4:].lower()
        if 'released' in ''.join(argslist) and handler:
            handler.update(time)
            prev_handler = handler
            handler = None
        elif prev_handler and not prev_handler.done:
            if prev_handler.button == mouse_btn:
                handler = prev_handler
                handler.timer.cancel()
                handler.update(time)
                handler.click()
                handler.begin(mouse_btn, time, handler.clicks)
                prev_handler = None
            else:
                prev_handler.timer.cancel()
                prev_handler.end()
                prev_handler = None
        else:
            handler = handlers.get('POINTER')
            handler.begin(mouse_btn, time)
    elif prev_handler and not prev_handler.done:
        prev_handler.timer.cancel()
        prev_handler.end()
        prev_handler = None

    # Only interested in pointer motion events
    if 'POINTER_MOTION' == event and key_handlers:
        pass

    # Only interested in keyboard events
    if 'KEYBOARD_KEY' == event:
        state = argslist[0].split()[1]
        if state == 'pressed':
            key_handler = KEY_PRESS()
            key_handler.begin(btn)
            key_handlers.append(key_handler)
        elif state == 'released':
            key_handler = key_handlers.pop()
            key_handler.end(handler)
        else:
            print('Unknown key state recieved: {}'.format(state), file=sys.stderr)

    # Only interested in gesture events.
    if 'GESTURE_' in event:
        gesture, event = event[8:].split('_')
        fingers = btn
        params = argslist[0] if argslist else ''

        # Action each type of event
        if event == 'UPDATE':
            # Split parameters into list of clean numbers
            if handler and not handler.update(re.split(r'[^-.\d]+', params)):
                print('Could not parse {} {}: {}'.format(gesture, event,
                    params), file=sys.stderr)
        elif event == 'BEGIN':
            handler = handlers.get(gesture)
            if handler:
                handler.begin(fingers)
            else:
                print('Unknown gesture received: {}.'.format(gesture),
                        file=sys.stderr)
        elif event == 'END':
            # Ignore gesture if final action is cancelled
            if handler:
                if params != 'cancelled':
                    handler.end()
                handler = None
        else:
            print('Unknown gesture + event received: {} + {}.'.format(gesture,
                event), file=sys.stderr)
